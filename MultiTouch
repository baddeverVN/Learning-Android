// these matrices will be used to move and zoom image
    private Matrix matrix = new Matrix();
    private Matrix savedMatrix = new Matrix();
    // we can be in one of these 3 states
    private static final int NONE = 0;
    private static final int DRAG = 1;
    private static final int ZOOM = 2;
    private int mode = NONE;
    // remember some things for zooming
    private PointF start = new PointF();
    private PointF mid = new PointF();
    private float oldDist = 1f;
    private float d = 0f;
    private float newRot = 0f;
    private float[] lastEvent = null;
    private boolean enabelDialog = false;

    public boolean onTouch(View v, MotionEvent event) {
        switch (v.getId()) {
            case R.id.img_your_photo:
                imageView.setScaleType(ImageView.ScaleType.MATRIX);
                if (iv_sticker != null || tv_sticker != null) {
                    int childcount = canvas.getChildCount();
                    for (int i = 0; i < childcount; i++) {
                        View myChild = canvas.getChildAt(i);
                        if (myChild.getId() == -1) {
                            try {
                                StickerImageView sticker = (StickerImageView) myChild;
                                sticker.setControlsVisibility(false);
                            } catch (Exception e) {
                            }

                            try {
                                StickerTextView stickertext = (StickerTextView) myChild;
                                stickertext.setControlsVisibility(false);
                            } catch (Exception e) {
                            }
                        }
                    }
                } else {
                    enabelDialog = true;
                }
                multiTouchImageView(v, event);
                break;
            case R.id.iv_sticker:
                iv_sticker.setControlsVisibility(true);
                enabelDialog = false;
                break;
            case R.id.frame_photo:
                break;
        }

        return true;
    }

    private void multiTouchImageView(View v, MotionEvent event) {
        ImageView view = (ImageView) v;
        switch (event.getAction() & MotionEvent.ACTION_MASK) {
            case MotionEvent.ACTION_DOWN:
                timeStart = System.currentTimeMillis();
                savedMatrix.set(matrix);
                start.set(event.getX(), event.getY());
                mode = DRAG;
                lastEvent = null;
                break;
            case MotionEvent.ACTION_POINTER_DOWN:
                oldDist = spacing(event);
                if (oldDist > 10f) {
                    savedMatrix.set(matrix);
                    midPoint(mid, event);
                    mode = ZOOM;
                }
                lastEvent = new float[4];
                lastEvent[0] = event.getX(0);
                lastEvent[1] = event.getX(1);
                lastEvent[2] = event.getY(0);
                lastEvent[3] = event.getY(1);
                d = rotation(event);
                break;
            case MotionEvent.ACTION_UP:
                timeStop = System.currentTimeMillis();
                long delta = timeStop - timeStart;
                double elapse = delta / 1000.0;
                enabelDialog = true;
            case MotionEvent.ACTION_POINTER_UP:
                mode = NONE;
                lastEvent = null;
                break;
            case MotionEvent.ACTION_MOVE:
                if (mode == DRAG) {
                    matrix.set(savedMatrix);
                    float dx = event.getX() - start.x;
                    float dy = event.getY() - start.y;
                    matrix.postTranslate(dx, dy);
                } else if (mode == ZOOM) {
                    float newDist = spacing(event);
                    if (newDist > 10f) {
                        matrix.set(savedMatrix);
                        float scale = (newDist / oldDist);
                        matrix.postScale(scale, scale, mid.x, mid.y);
                    }
                    if (lastEvent != null && event.getPointerCount() == 2) {
                        newRot = rotation(event);
                        rot(newRot, view);
                    }
                }
                break;
        }
        view.setImageMatrix(matrix);
    }

    public void rot(float newRot, ImageView view) {

        float r = newRot - d;
        float[] values = new float[9];
        matrix.getValues(values);
        float tx = values[2];
        float ty = values[5];
        float sx = values[0];
        float xc = (view.getWidth() / 2) * sx;
        float yc = (view.getHeight() / 2) * sx;
        if (VarHolder.BUTTON_ROTATE) {
            matrix = new Matrix();
            matrix.postRotate(90);
        } else matrix.postRotate(r, tx + xc, ty + yc);
        view.setImageMatrix(matrix);
    }

    /**
     * Determine the space between the first two fingers
     */
    private float spacing(MotionEvent event) {
        float x = event.getX(0) - event.getX(1);
        float y = event.getY(0) - event.getY(1);
//        return FloatMath.sqrt(x * x + y * y);
        return (float) Math.sqrt(x * x + y * y);
    }

    /**
     * Calculate the mid point of the first two fingers
     */
    private void midPoint(PointF point, MotionEvent event) {
        float x = event.getX(0) + event.getX(1);
        float y = event.getY(0) + event.getY(1);
        point.set(x / 2, y / 2);
    }

    /**
     * Calculate the degree to be rotated by.
     */
    private float rotation(MotionEvent event) {
        Log.d("test", "vao rotation");
        double delta_x = (event.getX(0) - event.getX(1));
        double delta_y = (event.getY(0) - event.getY(1));
        double radians = Math.atan2(delta_y, delta_x);
        Log.d("test", "radians : " + radians);
        return (float) Math.toDegrees(radians);
    }
